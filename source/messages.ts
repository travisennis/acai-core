import type {
  CoreAssistantMessage,
  CoreMessage,
  CoreToolMessage,
  CoreUserMessage,
} from "ai";

export function createUserMessage(content: string): CoreUserMessage {
  return {
    role: "user",
    content: [
      {
        type: "text",
        text: content,
      },
    ],
  };
}

export function createAssistantMessage(content: string): CoreAssistantMessage {
  return {
    role: "assistant",
    content: [
      {
        type: "text",
        text: content,
      },
    ],
  };
}

/**
A message that was generated during the generation process.
It can be either an assistant message or a tool message.
 */
type ResponseMessage = (CoreAssistantMessage | CoreToolMessage) & {
  /**
Message ID generated by the AI SDK.
 */
  id: string;
};

export function appendResponseMessages(
  messages: CoreMessage[],
  responseMessages: ResponseMessage[],
) {
  messages.push(...responseMessages);
}

export class MessageHistory {
  private history: CoreMessage[];
  constructor() {
    this.history = [];
  }

  get() {
    return [...this.history];
  }

  clear() {
    this.history.length = 0;
  }

  appendUserMessage(user: CoreUserMessage) {
    this.history.push(user);
  }

  appendAssistantMessage(assistant: CoreAssistantMessage) {
    this.history.push(assistant);
  }

  appendResponseMessages(responseMessages: ResponseMessage[]) {
    this.history.push(...responseMessages);
  }

  isEmpty() {
    return this.history.length === 0;
  }
}
